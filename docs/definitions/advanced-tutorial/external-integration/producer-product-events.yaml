# Producer for database lookup demo - generates product events

functions:
  generate_product_events:
    type: generator
    globalCode: |
      import random
      import time
      event_counter = 0
      product_ids = ["PROD001", "PROD002", "PROD003", "PROD004", "PROD005"]
      event_types = ["viewed", "added_to_cart", "purchased", "removed_from_cart"]
    code: |
      global event_counter, product_ids, event_types
      
      event_counter += 1
      product_id = random.choice(product_ids)
      event_type = random.choice(event_types)
      quantity = random.randint(1, 5) if event_type in ["added_to_cart", "purchased"] else 1
      current_timestamp = int(time.time() * 1000)
      
      # Create structured JSON product event for better readability in Kowl UI
      product_event = {
        "event_id": f"product_event_{event_counter:06d}",
        "event_type": event_type,
        "product_id": product_id,
        "quantity": quantity,
        "timestamp": current_timestamp,
        "sequence_number": event_counter,
        "user_id": f"user_{random.randint(1000, 9999)}",  # Random user for analytics
        "session_info": {
          "session_id": f"session_{event_counter // 10}_{random.randint(100, 999)}",
          "device_type": random.choice(["web", "mobile", "tablet"]),
          "platform": random.choice(["desktop", "ios", "android"])
        },
        "event_context": {
          "page_location": random.choice(["/products", "/category", "/search", "/recommendations"]),
          "source": random.choice(["browse", "search", "recommendation", "promotion"]),
          "cart_size": random.randint(0, 5),
          "user_tier": random.choice(["basic", "premium", "vip"])
        },
        "product_interaction": {
          "view_duration_ms": random.randint(5000, 60000) if event_type == "viewed" else None,
          "interaction_method": random.choice(["click", "tap", "voice", "scan"]),
          "from_wishlist": random.choice([True, False]) if event_type == "added_to_cart" else False
        },
        "metadata": {
          "simulation": True,
          "database_lookup": True,
          "needs_product_details": True,
          "tracking_id": f"track_{event_counter}_{product_id}"
        }
      }
      
    expression: (product_id, product_event)
    resultType: (string, json)

producers:
  product_event_producer:
    generator: generate_product_events
    interval: 2s
    to:
      topic: product_events
      keyType: string
      valueType: json