# $schema: https://raw.githubusercontent.com/Axual/ksml/refs/heads/release/1.0.x/docs/ksml-language-spec.json

# Simple compensating transaction example demonstrating rollback

streams:
  business_transactions:
    topic: business_transactions
    keyType: string
    valueType: json
    
  completed_transactions:
    topic: completed_transactions
    keyType: string
    valueType: json
    
  failed_transactions:
    topic: failed_transactions
    keyType: string
    valueType: json

functions:
  process_transaction:
    type: valueTransformer
    code: |
      transaction_id = value.get("transaction_id")
      transaction_type = value.get("type")
      
      try:
        # Step 1: Reserve inventory
        log.info("Step 1: Reserving inventory for {}", transaction_id)
        
        # Step 2: Process payment
        if transaction_type == "payment_fail":
          log.info("Step 2: Payment failed for {}", transaction_id) 
          # Rollback inventory reservation
          log.info("Compensating: Releasing inventory for {}", transaction_id)
          raise RuntimeError("Payment processing failed")
        
        log.info("Step 2: Payment processed for {}", transaction_id)
        
        # Step 3: Create shipment
        if transaction_type == "shipping_fail":
          log.info("Step 3: Shipping failed for {}", transaction_id)
          # Rollback payment and inventory
          log.info("Compensating: Refunding payment for {}", transaction_id)
          log.info("Compensating: Releasing inventory for {}", transaction_id)
          raise RuntimeError("Shipping service unavailable")
        
        log.info("Step 3: Shipment created for {}", transaction_id)
        
        # Success
        return {
          "transaction_id": transaction_id,
          "status": "completed",
          "steps": ["inventory", "payment", "shipping"]
        }
        
      except Exception as e:
        # Transaction failed with compensation
        return {
          "transaction_id": transaction_id,
          "status": "failed", 
          "error": str(e),
          "compensated": True
        }
        
    expression: result if 'result' in locals() else error_record if 'error_record' in locals() else value
    resultType: json
  
  is_completed:
    type: predicate
    expression: value.get("status") == "completed"

pipelines:
  compensating_transaction_demo:
    from: business_transactions
    via:
      - type: mapValues
        mapper: process_transaction
    branch:
      - if: is_completed
        to: completed_transactions
      - to: failed_transactions