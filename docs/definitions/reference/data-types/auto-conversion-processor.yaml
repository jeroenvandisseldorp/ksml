# Demonstrates automatic type conversion in KSML functions
# 
# This example shows how KSML automatically converts function return values
# to match the declared resultType, without requiring explicit conversion code.

streams:
  sensor_input:
    topic: sensor_data
    keyType: string
    valueType: json
    offsetResetPolicy: earliest
  
  processed_output:
    topic: processed_data
    keyType: string
    valueType: json

functions:
  # Example 1: Returns dict, automatically converted to string
  dict_to_string_auto:
    type: valueTransformer
    code: |
      # Function returns a Python dictionary
      result = {
        "sensor": key,
        "temp_fahrenheit": value.get("temperature", 0) * 1.8 + 32,
        "humidity_percent": value.get("humidity", 0),
        "location": value.get("city", "unknown").upper()
      }
      # Note: We return a dict, not a string
    expression: result
    resultType: string  # ← Automatic conversion: dict → JSON string
  
  # Example 2: Returns string, automatically converted to JSON
  string_to_json_auto:
    type: valueTransformer
    code: |
      import json
      # Function returns a string (manually created JSON)
      result = json.dumps({
        "id": key,
        "reading": value.get("temperature"),
        "unit": "celsius"
      })
      # Note: We return a string, not a dict
    expression: result
    resultType: json  # ← Automatic conversion: string → parsed JSON
  
  # Example 3: Returns float, automatically converted to int
  calculate_average:
    type: valueTransformer
    code: |
      # Function returns a float
      temp = value.get("temperature", 0)
      humidity = value.get("humidity", 0)
      result = (temp + humidity) / 2.0  # Float division
      # Note: We return a float
    expression: result
    resultType: int  # ← Automatic conversion: float → int (truncates)

pipelines:
  demonstrate_auto_conversion:
    from: sensor_input
    via:
      # Test automatic dict to string conversion
      - type: transformValue
        mapper: dict_to_string_auto
      
      - type: peek
        forEach:
          code: |
            # Value is now a string (automatic conversion happened)
            log.info("After auto dict→string: type={}, length={}", 
                     type(value).__name__, len(value))
      
      # Test automatic string to JSON conversion
      - type: transformValue
        mapper: string_to_json_auto
      
      - type: peek
        forEach:
          code: |
            # Value is now a dict/JSON (automatic parsing happened)
            log.info("After auto string→json: type={}, id={}, reading={}", 
                     type(value).__name__, value.get("id"), value.get("reading"))
      
      # Test automatic numeric conversion
      - type: transformValue
        mapper: calculate_average
      
      - type: peek
        forEach:
          code: |
            # Value is now an integer (automatic conversion from float)
            log.info("After auto float→int: type={}, average={}", 
                     type(value).__name__, value)
      
      # Wrap in JSON for output
      - type: transformValue
        mapper:
          type: valueTransformer
          code: |
            result = {
              "sensor_id": key,
              "average_reading": value,
              "processed": True
            }
          expression: result
          resultType: json
    
    to: processed_output